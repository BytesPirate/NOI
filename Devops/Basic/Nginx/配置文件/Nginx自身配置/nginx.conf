# Nginx 本身的配置文件
#
# 指定可以运行 nginx 服务的用户和用户组
# user [user] [group];
user nginx nginx;

# 指定工作线程数，可以制定具体的进程数，也可以使用自动模式
worker_processes auto;
# 工作进程的 CPU 绑定由 Nginx 自动调整
worker_cpu_affinity auto;
# 一个 Nginx 进程打开的最多文件描述符数量
worker_rlimit_nofile 65535;

# 错误日志为，默认为 Nginx 的安装目录
error_log /data/logs/nginx/error.log;
# 设置 pid 文件的存放位置
pid /run/nginx.pid;



events {
    # 事件模型，epoll 模型是 Linux 内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就使用 kqueue 模型
    use epoll;
    # 单个进程最大连接数
    worker_connections 65535;
    # 如果请求数一直是维持在一个很高的水平，可以设置为 on
    multi_accept on;
}

http {
    # 文件拓展名与文件类型映射表
    include       mime.types;

    # 基于 Nginx_http_proxy_module 模块实现的代理功能，当 nginx 用做 client 服务器时使用
    include /usr/local/nginx/conf/proxy.conf;

    # 当配置了 lua 模块时需要取消注释
    # lua_package_path "/usr/local/lua-resty-core-0.1/lib/lua/?.lua;/usr/local/lua-resty-lrucache-0.13/lib/lua/?.lua;;";

    # 默认文件类型
    default_type  application/octet-stream;
    # 默认编码
    charset utf-8;

    # 开启高效文件传输模式
    sendfile   on;
    tcp_nopush on;

    # 增加小包的数量，提高响应速度
    # 设置为 off 时会增加通信的延迟，提高带宽利用率
    tcp_nodelay on;

    # 大文件传输配置
    client_max_body_size 50m;
    client_body_buffer_size 128k;

    # 隐藏 nginx 版本号
    server_tokens off;

    # 指定每个 TCP 连接可以保持多长时间
    keepalive_timeout 60s;

    # 改善网站的性能：减少资源的占用，提高访问速度
    # nginx 接受 client 请求时的响应
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    # 开启 gzip 压缩
    gzip on;
    gzip_min_length 1k;     #最小压缩文件大小
    gzip_buffers 4 16k;     #压缩缓冲区
    gzip_comp_level 2;      #压缩等级
    gzip_types text/javascript text/css application/javascript application/json text/plain application/xml;  #压缩类型
    gzip_vary on;           #在响应头部添加 Accept-Encoding: gzip

    log_format main_json
        '{"@timestamp":"$time_iso8601",'                      #时间格式
        '"server_addr":"$server_addr",'                       #服务器端地址
        '"hostname":"$hostname",'                             #主机名
        '"ip":"$http_x_forwarded_for",'                       #浏览当前页面的用户计算机的网关
        '"remote_addr":"$remote_addr",'                       #浏览当前页面的用户计算机的ip地址(上一级ip)
        '"request":"$request",'                               #客户端的请求地址
        '"request_method":"$request_method",'                 #http请求方法
        '"scheme":"$scheme",'                                 #请求使用的web协议
        '"body_bytes_sent":"$body_bytes_sent",'               #传输给客户端的字节数(不算响应头)
        '"request_time":"$request_time",'                     #处理客户端请求使用的时间
        '"upstream_response_time":"$upstream_response_time",' #请求过程中 upstream 响应时间
        '"upstream_addr":"$upstream_addr",'                   #后台 upstream 地址，即真正提供服务的主机地址
        '"host":"$host",'                                     #请求地址
        '"uri":"$uri",'                                       #请求中的当前url
        '"request_uri":"$request_uri",'                       #请求原始url
        '"args":"$args",'                                     #请求中的参数值
        '"http_referer":"$http_referer",'                     #url 跳转来源,用来记录从那个页面链接访问过来的
        '"http_user_agent":"$http_user_agent",'               #用户终端浏览器等信息
        '"status":"$status"}';                                #http响应代码

    # nginx 访问日志
    access_log  /data/logs/nginx/access.log main_json;

    include /usr/local/nginx/conf/conf.d/*.conf;
    include /usr/local/nginx/conf/conf.d/*/*.conf;
}
